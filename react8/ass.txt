Q1:   How do you create Nested Routes react-router-dom configuration?
Ans   * we create route using createBrowserRouter and if we talked about nested router that means 
      children of children. 
      * And it is coming from react-router-dom;

eg:  createBrowserRouter([
        {
            path: "/abc",
            element: <ABC />,
            children: [
                path: "about",
                element: <About />,
                children: [
                    path: "profile"
                    element: <Profile />
                ]
            ]
        }
     ]);

Q2:   createHashRouter, createMemoryRouter from React Router Dom?    
Ans:  createHashRouter is useful when you are not able to configure your web server to direct all
      traffic to your react router application. Instead of using normal URLs, it will use the hash(#)
      portion of the URL to manage the "application url".

      createMemoryRouter is useful for testing and component developments tools like storybook


Q3:   What is order of life cycle method calls in Class Based components?
Ans:  Two phase in React Class Based component.
      1) Render phase 
      2) Commit phase

    Life cycle of Class Base component

                                |     Render Phase    |        Mounting 
    Constructor                 |                     |       
    Render                      |                     |   
                                                      | 
    ­React updates ­D­O­M and refs  |     Commit Phase    | 
    componentDidMount           |                     | 


    set­State()                  |     Render Phase    |        Updating
    Render                      |                     |
                                                      |
    ­React updates ­D­O­M and refs  |     Commit Phase    | 
    componentDidUpdate          |                     |


    Leave the Page              |                     |        Unmounting



Q4:   Why do we use componentDidMount?  
Ans:  we use componentDidMount method to call api after render method.  

Q5:   Why do we use componentWillUnmount? Show with example?
Ans:  In class component, we have to remove some event listners with the help of componentWillUnmount 
      method. componentWillUnmount is invoked immediately before a component is unmounted or destroyed.
      For eg: we need to clear setInterval in class component, so we use componentWillUnmount method.

      import React from "react";
      export default class Clock extends React.Component {
        constructor(props) {
          console.log("Clock", "constructor");
          super(props);   
          this.state = {
            date: new Date()
          };
        }
        tick() {   
          this.setState({
            date: new Date()
          });
        }
        // These methods are called "lifecycle hooks".
        componentDidMount() {
          console.log("Clock", "componentDidMount");
          this.timerID = setInterval(() => {
            this.tick();
          }, 1000);
        }
        // These methods are called "lifecycle hooks".
        componentWillUnmount() {
          console.log("Clock", "componentWillUnmount");
          clearInterval(this.timerID);
        }
        render() {
          return (        
              <div>It is {this.state.date.toLocaleTimeString()}.</div>
          );
        }
      

Q5:   Why do we use super(props) in constructor?
Ans   Super() function is  to call the contructor of the parent class. It is used when we need 
      to access a few variables in the parent class.
      Using Super(props), you can access 'this.props' inside the constructor method when you pass
      'props' to super() method in the contructor.      


Q6:   Why can't we have the callback function of useEffect async?
Ans:  
      useEffect(async () => {
        const users = await fetchUsers();
        setUsers(users);

        return () => {
          // this never gets called, hello memory leaks...
        };
      }, []);

      This will work,but should avoid. Because React's useEffect hook expects a cleanup function returned
      from which is called when the component unmounts. Using an async function here will cause a bug
      as the cleanup function will never get called.      


 Write like this: 
      useEffect must not return anything besides a function, which is used for clean-up.

      It looks like you wrote useEffect(async () => ...) or returned a Promise. 
      Instead, write the async function inside your effect and call it immediately:

      useEffect(() => {
          async function fetchData() {
          // You can await here
          const response = await MyAPI.getData(someId);
          // ...
          }
          fetchData();
      }, [someId]); // Or [] if effect doesn't need props or state

Note*=> This is the internal of React , And related to how Hooks are build.